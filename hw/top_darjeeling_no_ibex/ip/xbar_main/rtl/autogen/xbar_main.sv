// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// dma.host
//   -> s1n_20
//     -> sram_ctrl_main.ram
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
//     -> aes
//     -> hmac
//     -> otbn
//     -> keymgr_dpe
//     -> kmac
//     -> soc_proxy.ctn
//     -> asf_22
//       -> peri
// mbx0.sram
//   -> s1n_23
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx1.sram
//   -> s1n_24
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx2.sram
//   -> s1n_25
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx3.sram
//   -> s1n_26
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx4.sram
//   -> s1n_27
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx5.sram
//   -> s1n_28
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx6.sram
//   -> s1n_29
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx_jtag.sram
//   -> s1n_30
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx_pcie0.sram
//   -> s1n_31
//     -> sm1_21
//       -> sram_ctrl_mbox.ram
// mbx_pcie1.sram
//   -> s1n_32
//     -> sm1_21
//       -> sram_ctrl_mbox.ram

module xbar_main (
  input clk_main_i,
  input clk_fixed_i,
  input rst_main_ni,
  input rst_fixed_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_dma__host_i,
  output tlul_pkg::tl_d2h_t tl_dma__host_o,
  input  tlul_pkg::tl_h2d_t tl_mbx0__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx0__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx1__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx1__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx2__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx2__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx3__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx3__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx4__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx4__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx5__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx5__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx6__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx6__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx_jtag__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx_jtag__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx_pcie0__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx_pcie0__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx_pcie1__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx_pcie1__sram_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_peri_o,
  input  tlul_pkg::tl_d2h_t tl_peri_i,
  output tlul_pkg::tl_h2d_t tl_soc_proxy__ctn_o,
  input  tlul_pkg::tl_d2h_t tl_soc_proxy__ctn_i,
  output tlul_pkg::tl_h2d_t tl_hmac_o,
  input  tlul_pkg::tl_d2h_t tl_hmac_i,
  output tlul_pkg::tl_h2d_t tl_kmac_o,
  input  tlul_pkg::tl_d2h_t tl_kmac_i,
  output tlul_pkg::tl_h2d_t tl_aes_o,
  input  tlul_pkg::tl_d2h_t tl_aes_i,
  output tlul_pkg::tl_h2d_t tl_otbn_o,
  input  tlul_pkg::tl_d2h_t tl_otbn_i,
  output tlul_pkg::tl_h2d_t tl_keymgr_dpe_o,
  input  tlul_pkg::tl_d2h_t tl_keymgr_dpe_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__ram_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_mbox__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_mbox__ram_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_s1n_20_us_h2d ;
  tl_d2h_t tl_s1n_20_us_d2h ;


  tl_h2d_t tl_s1n_20_ds_h2d [9];
  tl_d2h_t tl_s1n_20_ds_d2h [9];

  // Create steering signal
  logic [3:0] dev_sel_s1n_20;


  tl_h2d_t tl_sm1_21_us_h2d [11];
  tl_d2h_t tl_sm1_21_us_d2h [11];

  tl_h2d_t tl_sm1_21_ds_h2d ;
  tl_d2h_t tl_sm1_21_ds_d2h ;

  tl_h2d_t tl_asf_22_us_h2d ;
  tl_d2h_t tl_asf_22_us_d2h ;
  tl_h2d_t tl_asf_22_ds_h2d ;
  tl_d2h_t tl_asf_22_ds_d2h ;

  tl_h2d_t tl_s1n_23_us_h2d ;
  tl_d2h_t tl_s1n_23_us_d2h ;


  tl_h2d_t tl_s1n_23_ds_h2d [1];
  tl_d2h_t tl_s1n_23_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_23;

  tl_h2d_t tl_s1n_24_us_h2d ;
  tl_d2h_t tl_s1n_24_us_d2h ;


  tl_h2d_t tl_s1n_24_ds_h2d [1];
  tl_d2h_t tl_s1n_24_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_24;

  tl_h2d_t tl_s1n_25_us_h2d ;
  tl_d2h_t tl_s1n_25_us_d2h ;


  tl_h2d_t tl_s1n_25_ds_h2d [1];
  tl_d2h_t tl_s1n_25_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_25;

  tl_h2d_t tl_s1n_26_us_h2d ;
  tl_d2h_t tl_s1n_26_us_d2h ;


  tl_h2d_t tl_s1n_26_ds_h2d [1];
  tl_d2h_t tl_s1n_26_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_26;

  tl_h2d_t tl_s1n_27_us_h2d ;
  tl_d2h_t tl_s1n_27_us_d2h ;


  tl_h2d_t tl_s1n_27_ds_h2d [1];
  tl_d2h_t tl_s1n_27_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_27;

  tl_h2d_t tl_s1n_28_us_h2d ;
  tl_d2h_t tl_s1n_28_us_d2h ;


  tl_h2d_t tl_s1n_28_ds_h2d [1];
  tl_d2h_t tl_s1n_28_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_28;

  tl_h2d_t tl_s1n_29_us_h2d ;
  tl_d2h_t tl_s1n_29_us_d2h ;


  tl_h2d_t tl_s1n_29_ds_h2d [1];
  tl_d2h_t tl_s1n_29_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_29;

  tl_h2d_t tl_s1n_30_us_h2d ;
  tl_d2h_t tl_s1n_30_us_d2h ;


  tl_h2d_t tl_s1n_30_ds_h2d [1];
  tl_d2h_t tl_s1n_30_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_30;

  tl_h2d_t tl_s1n_31_us_h2d ;
  tl_d2h_t tl_s1n_31_us_d2h ;


  tl_h2d_t tl_s1n_31_ds_h2d [1];
  tl_d2h_t tl_s1n_31_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_31;

  tl_h2d_t tl_s1n_32_us_h2d ;
  tl_d2h_t tl_s1n_32_us_d2h ;


  tl_h2d_t tl_s1n_32_ds_h2d [1];
  tl_d2h_t tl_s1n_32_ds_d2h [1];

  // Create steering signal
  logic [0:0] dev_sel_s1n_32;



  assign tl_sram_ctrl_main__ram_o = tl_s1n_20_ds_h2d[0];
  assign tl_s1n_20_ds_d2h[0] = tl_sram_ctrl_main__ram_i;

  assign tl_sm1_21_us_h2d[0] = tl_s1n_20_ds_h2d[1];
  assign tl_s1n_20_ds_d2h[1] = tl_sm1_21_us_d2h[0];

  assign tl_aes_o = tl_s1n_20_ds_h2d[2];
  assign tl_s1n_20_ds_d2h[2] = tl_aes_i;

  assign tl_hmac_o = tl_s1n_20_ds_h2d[3];
  assign tl_s1n_20_ds_d2h[3] = tl_hmac_i;

  assign tl_otbn_o = tl_s1n_20_ds_h2d[4];
  assign tl_s1n_20_ds_d2h[4] = tl_otbn_i;

  assign tl_keymgr_dpe_o = tl_s1n_20_ds_h2d[5];
  assign tl_s1n_20_ds_d2h[5] = tl_keymgr_dpe_i;

  assign tl_kmac_o = tl_s1n_20_ds_h2d[6];
  assign tl_s1n_20_ds_d2h[6] = tl_kmac_i;

  assign tl_soc_proxy__ctn_o = tl_s1n_20_ds_h2d[7];
  assign tl_s1n_20_ds_d2h[7] = tl_soc_proxy__ctn_i;

  assign tl_asf_22_us_h2d = tl_s1n_20_ds_h2d[8];
  assign tl_s1n_20_ds_d2h[8] = tl_asf_22_us_d2h;

  assign tl_sm1_21_us_h2d[1] = tl_s1n_23_ds_h2d[0];
  assign tl_s1n_23_ds_d2h[0] = tl_sm1_21_us_d2h[1];

  assign tl_sm1_21_us_h2d[2] = tl_s1n_24_ds_h2d[0];
  assign tl_s1n_24_ds_d2h[0] = tl_sm1_21_us_d2h[2];

  assign tl_sm1_21_us_h2d[3] = tl_s1n_25_ds_h2d[0];
  assign tl_s1n_25_ds_d2h[0] = tl_sm1_21_us_d2h[3];

  assign tl_sm1_21_us_h2d[4] = tl_s1n_26_ds_h2d[0];
  assign tl_s1n_26_ds_d2h[0] = tl_sm1_21_us_d2h[4];

  assign tl_sm1_21_us_h2d[5] = tl_s1n_27_ds_h2d[0];
  assign tl_s1n_27_ds_d2h[0] = tl_sm1_21_us_d2h[5];

  assign tl_sm1_21_us_h2d[6] = tl_s1n_28_ds_h2d[0];
  assign tl_s1n_28_ds_d2h[0] = tl_sm1_21_us_d2h[6];

  assign tl_sm1_21_us_h2d[7] = tl_s1n_29_ds_h2d[0];
  assign tl_s1n_29_ds_d2h[0] = tl_sm1_21_us_d2h[7];

  assign tl_sm1_21_us_h2d[8] = tl_s1n_30_ds_h2d[0];
  assign tl_s1n_30_ds_d2h[0] = tl_sm1_21_us_d2h[8];

  assign tl_sm1_21_us_h2d[9] = tl_s1n_31_ds_h2d[0];
  assign tl_s1n_31_ds_d2h[0] = tl_sm1_21_us_d2h[9];

  assign tl_sm1_21_us_h2d[10] = tl_s1n_32_ds_h2d[0];
  assign tl_s1n_32_ds_d2h[0] = tl_sm1_21_us_d2h[10];

  assign tl_s1n_20_us_h2d = tl_dma__host_i;
  assign tl_dma__host_o = tl_s1n_20_us_d2h;

  assign tl_sram_ctrl_mbox__ram_o = tl_sm1_21_ds_h2d;
  assign tl_sm1_21_ds_d2h = tl_sram_ctrl_mbox__ram_i;

  assign tl_peri_o = tl_asf_22_ds_h2d;
  assign tl_asf_22_ds_d2h = tl_peri_i;

  assign tl_s1n_23_us_h2d = tl_mbx0__sram_i;
  assign tl_mbx0__sram_o = tl_s1n_23_us_d2h;

  assign tl_s1n_24_us_h2d = tl_mbx1__sram_i;
  assign tl_mbx1__sram_o = tl_s1n_24_us_d2h;

  assign tl_s1n_25_us_h2d = tl_mbx2__sram_i;
  assign tl_mbx2__sram_o = tl_s1n_25_us_d2h;

  assign tl_s1n_26_us_h2d = tl_mbx3__sram_i;
  assign tl_mbx3__sram_o = tl_s1n_26_us_d2h;

  assign tl_s1n_27_us_h2d = tl_mbx4__sram_i;
  assign tl_mbx4__sram_o = tl_s1n_27_us_d2h;

  assign tl_s1n_28_us_h2d = tl_mbx5__sram_i;
  assign tl_mbx5__sram_o = tl_s1n_28_us_d2h;

  assign tl_s1n_29_us_h2d = tl_mbx6__sram_i;
  assign tl_mbx6__sram_o = tl_s1n_29_us_d2h;

  assign tl_s1n_30_us_h2d = tl_mbx_jtag__sram_i;
  assign tl_mbx_jtag__sram_o = tl_s1n_30_us_d2h;

  assign tl_s1n_31_us_h2d = tl_mbx_pcie0__sram_i;
  assign tl_mbx_pcie0__sram_o = tl_s1n_31_us_d2h;

  assign tl_s1n_32_us_h2d = tl_mbx_pcie1__sram_i;
  assign tl_mbx_pcie1__sram_o = tl_s1n_32_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_20 = 4'd9;
    if ((tl_s1n_20_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_20 = 4'd0;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_20 = 4'd1;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_s1n_20 = 4'd2;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_s1n_20 = 4'd3;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_s1n_20 = 4'd4;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR_DPE)) == ADDR_SPACE_KEYMGR_DPE) begin
      dev_sel_s1n_20 = 4'd5;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_s1n_20 = 4'd6;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CTN)) == ADDR_SPACE_SOC_PROXY__CTN) begin
      dev_sel_s1n_20 = 4'd7;

    end else if ((tl_s1n_20_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_s1n_20 = 4'd8;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_23 = 1'd1;
    if ((tl_s1n_23_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_23 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_24 = 1'd1;
    if ((tl_s1n_24_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_24 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_25 = 1'd1;
    if ((tl_s1n_25_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_25 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_26 = 1'd1;
    if ((tl_s1n_26_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_26 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_27 = 1'd1;
    if ((tl_s1n_27_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_27 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_28 = 1'd1;
    if ((tl_s1n_28_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_28 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_29 = 1'd1;
    if ((tl_s1n_29_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_29 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_30 = 1'd1;
    if ((tl_s1n_30_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_30 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_31 = 1'd1;
    if ((tl_s1n_31_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_31 = 1'd0;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_32 = 1'd1;
    if ((tl_s1n_32_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_32 = 1'd0;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqPass  (9'h183),
    .DRspPass  (9'h183),
    .DReqDepth (36'h1111100),
    .DRspDepth (36'h1111100),
    .N         (9)
  ) u_s1n_20 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_20_us_h2d),
    .tl_h_o       (tl_s1n_20_us_d2h),
    .tl_d_o       (tl_s1n_20_ds_h2d),
    .tl_d_i       (tl_s1n_20_ds_d2h),
    .dev_select_i (dev_sel_s1n_20)
  );
  tlul_socket_m1 #(
    .HReqDepth (44'h0),
    .HRspDepth (44'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (11)
  ) u_sm1_21 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_21_us_h2d),
    .tl_h_o       (tl_sm1_21_us_d2h),
    .tl_d_o       (tl_sm1_21_ds_h2d),
    .tl_d_i       (tl_sm1_21_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (1),
    .RspDepth        (1)
  ) u_asf_22 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_fixed_i),
    .rst_d_ni     (rst_fixed_ni),
    .tl_h_i       (tl_asf_22_us_h2d),
    .tl_h_o       (tl_asf_22_us_d2h),
    .tl_d_o       (tl_asf_22_ds_h2d),
    .tl_d_i       (tl_asf_22_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_23 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_23_us_h2d),
    .tl_h_o       (tl_s1n_23_us_d2h),
    .tl_d_o       (tl_s1n_23_ds_h2d),
    .tl_d_i       (tl_s1n_23_ds_d2h),
    .dev_select_i (dev_sel_s1n_23)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_24 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_24_us_h2d),
    .tl_h_o       (tl_s1n_24_us_d2h),
    .tl_d_o       (tl_s1n_24_ds_h2d),
    .tl_d_i       (tl_s1n_24_ds_d2h),
    .dev_select_i (dev_sel_s1n_24)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_25 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_25_us_h2d),
    .tl_h_o       (tl_s1n_25_us_d2h),
    .tl_d_o       (tl_s1n_25_ds_h2d),
    .tl_d_i       (tl_s1n_25_ds_d2h),
    .dev_select_i (dev_sel_s1n_25)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_26 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_26_us_h2d),
    .tl_h_o       (tl_s1n_26_us_d2h),
    .tl_d_o       (tl_s1n_26_ds_h2d),
    .tl_d_i       (tl_s1n_26_ds_d2h),
    .dev_select_i (dev_sel_s1n_26)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_27 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_27_us_h2d),
    .tl_h_o       (tl_s1n_27_us_d2h),
    .tl_d_o       (tl_s1n_27_ds_h2d),
    .tl_d_i       (tl_s1n_27_ds_d2h),
    .dev_select_i (dev_sel_s1n_27)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_28 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_28_us_h2d),
    .tl_h_o       (tl_s1n_28_us_d2h),
    .tl_d_o       (tl_s1n_28_ds_h2d),
    .tl_d_i       (tl_s1n_28_ds_d2h),
    .dev_select_i (dev_sel_s1n_28)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_29 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_29_us_h2d),
    .tl_h_o       (tl_s1n_29_us_d2h),
    .tl_d_o       (tl_s1n_29_ds_h2d),
    .tl_d_i       (tl_s1n_29_ds_d2h),
    .dev_select_i (dev_sel_s1n_29)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_30 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_30_us_h2d),
    .tl_h_o       (tl_s1n_30_us_d2h),
    .tl_d_o       (tl_s1n_30_ds_h2d),
    .tl_d_i       (tl_s1n_30_ds_d2h),
    .dev_select_i (dev_sel_s1n_30)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_31 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_31_us_h2d),
    .tl_h_o       (tl_s1n_31_us_d2h),
    .tl_d_o       (tl_s1n_31_ds_h2d),
    .tl_d_i       (tl_s1n_31_ds_d2h),
    .dev_select_i (dev_sel_s1n_31)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .N         (1)
  ) u_s1n_32 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_32_us_h2d),
    .tl_h_o       (tl_s1n_32_us_d2h),
    .tl_d_o       (tl_s1n_32_ds_h2d),
    .tl_d_i       (tl_s1n_32_ds_d2h),
    .dev_select_i (dev_sel_s1n_32)
  );

endmodule
