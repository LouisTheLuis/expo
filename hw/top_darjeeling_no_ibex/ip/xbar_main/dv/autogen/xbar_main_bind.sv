// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main_bind module generated by `tlgen.py` tool for assertions
module xbar_main_bind;
`ifndef GATE_LEVEL
  // Host interfaces
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_dma__host (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_dma__host_i),
    .d2h    (tl_dma__host_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx0__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx0__sram_i),
    .d2h    (tl_mbx0__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx1__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx1__sram_i),
    .d2h    (tl_mbx1__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx2__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx2__sram_i),
    .d2h    (tl_mbx2__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx3__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx3__sram_i),
    .d2h    (tl_mbx3__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx4__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx4__sram_i),
    .d2h    (tl_mbx4__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx5__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx5__sram_i),
    .d2h    (tl_mbx5__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx6__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx6__sram_i),
    .d2h    (tl_mbx6__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx_jtag__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx_jtag__sram_i),
    .d2h    (tl_mbx_jtag__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx_pcie0__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx_pcie0__sram_i),
    .d2h    (tl_mbx_pcie0__sram_o)
  );
  bind xbar_main tlul_assert #(.EndpointType("Device")) tlul_assert_host_mbx_pcie1__sram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_mbx_pcie1__sram_i),
    .d2h    (tl_mbx_pcie1__sram_o)
  );

  // Device interfaces
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_peri (
    .clk_i  (clk_fixed_i),
    .rst_ni (rst_fixed_ni),
    .h2d    (tl_peri_o),
    .d2h    (tl_peri_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_soc_proxy__ctn (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_soc_proxy__ctn_o),
    .d2h    (tl_soc_proxy__ctn_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_hmac (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_hmac_o),
    .d2h    (tl_hmac_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_kmac (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_kmac_o),
    .d2h    (tl_kmac_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_aes (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_aes_o),
    .d2h    (tl_aes_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_otbn (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_otbn_o),
    .d2h    (tl_otbn_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_keymgr_dpe (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_keymgr_dpe_o),
    .d2h    (tl_keymgr_dpe_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_sram_ctrl_main__ram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_sram_ctrl_main__ram_o),
    .d2h    (tl_sram_ctrl_main__ram_i)
  );
  bind xbar_main tlul_assert #(.EndpointType("Host")) tlul_assert_device_sram_ctrl_mbox__ram (
    .clk_i  (clk_main_i),
    .rst_ni (rst_main_ni),
    .h2d    (tl_sram_ctrl_mbox__ram_o),
    .d2h    (tl_sram_ctrl_mbox__ram_i)
  );
`endif
endmodule
